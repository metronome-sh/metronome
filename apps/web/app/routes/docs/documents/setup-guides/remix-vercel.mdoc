---
title: "Using Metronome with Vercel"
description: "How to integrate Metronome with your Remix app using the Vercel adapter."
---

# Setting up Metronome with Remix + Vercel

## Coming soon
Vercel changed the way it deploys the Remix app that is not compatible with the current Metronome implementation. We are working hard to make a new release to support the new Vercel deployment process. Stay tuned!

<!-- {% partial file="metronome-installation.partial.mdoc" variables={adapter: "vercel"} /%}

{% partial file="metronome-init.partial.mdoc" /%}

{% partial file="metronome-root-config.partial.mdoc" /%}

## Configuring Metronome in your in you server.js file

### TL;DR

If you haven't modified your `server.js`, you can just copy and paste the code following code. Otherwise, you can follow the step by step down below.

```js {% title="server.js" %}
import {
  registerMetronome,
  createMetronomeGetLoadContext,
} from "@metronome-sh/vercel";
import * as build from "@remix-run/dev/server-build";
import { createRequestHandler } from "@remix-run/vercel";

const buildWithMetronome = registerMetronome(build);

const metronomeGetLoadContext = createMetronomeGetLoadContext(
  buildWithMetronome,
  { config: require("./metronome.config.js") }
);

export default createRequestHandler({
  build: buildWithMetronome,
  getLoadContext: metronomeGetLoadContext,
  mode: process.env.NODE_ENV,
});
```

### Step by step

Import `createMetronomeGetLoadContext` and `registerMetronome` from the `@metronome-sh/vercel` package in your `server.js` file.

```js {% title="server.js" %}
import {
  createMetronomeGetLoadContext,
  registerMetronome,
} from "@metronome-sh/vercel";
```

Register Metronome in your app build by using the `registerMetronome` function in your `server.js` file.

```js {% title="server.js" %}
const buildWithMetronome = registerMetronome(build);
```

Create the `getLoadContext` function using `createMetronomeGetLoadContext` with `buildWithMetronome` and the Metronome config file.

```js {% title="server.js" %}
const metronomeGetLoadContext = createMetronomeGetLoadContext(
  buildWithMetronome,
  { config: require("./metronome.config.js") }
);
```

In the `createRequestHandler` function, replace the `build` prop with `buildWithMetronome` and add `getLoadContext` with `metronomeGetLoadContext`.

```js {% title="server.js" %}
export default createRequestHandler({
  build: buildWithMetronome,
  getLoadContext: metronomeGetLoadContext,
  mode: process.env.NODE_ENV,
});
```

## Set your API key in your production environment

If you don't have an existing project you can create one [here](/projects/new).

Go to your project in Vercel, and in `Settings â†’ Environment Variables`, set the `METRONOME_API_KEY` environment variable:

{% image src="/images/doc-vercel-envs.png" .w-full .mt-4 .mx-auto .rounded-lg /%}

### Deploy your app

Once you have your `METRONOME_API_KEY` set up in Vercel, deploy your project to production. -->
