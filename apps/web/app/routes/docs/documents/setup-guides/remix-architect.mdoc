---
title: "Using Metronome with Architect"
description: "How to integrate Metronome with your Remix app using the Architect adapter."
---

# Setting up Metronome with Remix + Architect

{% partial file="metronome-installation.partial.mdoc" variables={adapter: "architect"} /%}

{% partial file="metronome-init.partial.mdoc" /%}

{% partial file="metronome-root-config.partial.mdoc" /%}

## Configuring Metronome in your in you server.js file

### TL;DR

If you haven't modified your `server.js`, you can just copy and paste the code following code. Otherwise, you can follow the step by step down below.

```js {% title="server.js" %}
import {
  createMetronomeGetLoadContext,
  registerMetronome,
} from "@metronome-sh/architect";
import { createRequestHandler } from "@remix-run/architect";
import * as build from "@remix-run/dev/server-build";

const buildWithMetronome = registerMetronome(build);

const metronomeGetLoadContext = createMetronomeGetLoadContext(
  buildWithMetronome,
  { config: require("./metronome.config.js") }
);

export const handler = createRequestHandler({
  build: buildWithMetronome,
  mode: process.env.NODE_ENV,
  getLoadContext: metronomeGetLoadContext,
});
```

### Step by step

Import `createMetronomeGetLoadContext` and `registerMetronome` from the `@metronome-sh/architect` package in your `server.js` file.

```js {% title="server.js" %}
import {
  createMetronomeGetLoadContext,
  registerMetronome,
} from "@metronome-sh/architect";
```

Register Metronome in your app build by using the `registerMetronome` function in your `server.js` file.

```js {% title="server.js" %}
const buildWithMetronome = registerMetronome(build);
```

Create the `getLoadContext` function using `createMetronomeGetLoadContext` with `buildWithMetronome` and the Metronome config file.

```js {% title="server.js" %}
const metronomeGetLoadContext = createMetronomeGetLoadContext(
  buildWithMetronome,
  { config: require("./metronome.config.js") }
);
```

In the `createRequestHandler` function, replace the `build` prop with `buildWithMetronome` and add the `getLoadContext` prop with `metronomeGetLoadContext`.

```js {% title="server.js" %}
export const handler = createRequestHandler({
  build: buildWithMetronome,
  mode: process.env.NODE_ENV,
  getLoadContext: metronomeGetLoadContext,
});
```

## Set your API key in your production environment

If you don't have an existing project you can create one [here](/projects/new).

You need to add the `METRONOME_API_KEY` environment variable in the production environment:

```bash {% title="Terminal" %}
arc env production METRONOME_API_KEY {project-api-key}
```
