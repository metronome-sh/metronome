---
title: "Using Metronome with Netlify"
description: "How to integrate Metronome with your Remix app using the Netlify adapter."
---

# Setting up Metronome with Remix + Netlify

{% partial file="metronome-installation.partial.mdoc" variables={adapter: "netlify"} /%}

{% partial file="metronome-init.partial.mdoc" /%}

{% partial file="metronome-root-config.partial.mdoc" /%}

## Configuring Metronome in your in you server.js file

### TL;DR

If you haven't modified your `server.js`, you can just copy and paste the code following code. Otherwise, you can follow the step by step down below.

```js {% title="server.js" %}
import {
  combineGetLoadContexts,
  createMetronomeGetLoadContext,
  registerMetronome,
} from "@metronome-sh/netlify";
import * as build from "@remix-run/dev/server-build";
import { createRequestHandler } from "@remix-run/netlify";

const buildWithMetronome = registerMetronome(build);

const metronomeGetLoadContext = createMetronomeGetLoadContext(
  buildWithMetronome,
  { config: require("./metronome.config.js") }
);

/*
 * Returns a context object with at most 3 keys:
 *  - `netlifyGraphToken`: raw authentication token to use with Netlify Graph
 *  - `clientNetlifyGraphAccessToken`: For use with JWTs generated by
 *    `netlify-graph-auth`.
 *  - `netlifyGraphSignature`: a signature for subscription events. Will be
 *    present if a secret is set.
 */
function getLoadContext(event, context) {
  let rawAuthorizationString;
  let netlifyGraphToken;

  if (event.authlifyToken != null) {
    netlifyGraphToken = event.authlifyToken;
  }

  let authHeader = event.headers["authorization"];
  let graphSignatureHeader = event.headers["x-netlify-graph-signature"];

  if (authHeader != null && /Bearer /gi.test(authHeader)) {
    rawAuthorizationString = authHeader.split(" ")[1];
  }

  let loadContext = {
    clientNetlifyGraphAccessToken: rawAuthorizationString,
    netlifyGraphToken: netlifyGraphToken,
    netlifyGraphSignature: graphSignatureHeader,
  };

  // Remove keys with undefined values
  Object.keys(loadContext).forEach((key) => {
    if (loadContext[key] == null) {
      delete loadContext[key];
    }
  });

  return loadContext;
}

export const handler = createRequestHandler({
  build: buildWithMetronome,
  getLoadContext: combineGetLoadContexts(
    getLoadContext,
    metronomeGetLoadContext
  ),
  mode: process.env.NODE_ENV,
});
```

### Step by step

Import `combineGetLoadContexts`, `createMetronomeGetLoadContext` and `registerMetronome` from the `@metronome-sh/netlify` package in your `server.js` file.

```js {% title="server.js" %}
import {
  combineGetLoadContexts,
  createMetronomeGetLoadContext,
  registerMetronome,
} from "@metronome-sh/netlify";
```

Register Metronome in your app build by using the `registerMetronome` function in your `server.js` file.

```js {% title="server.js" %}
const buildWithMetronome = registerMetronome(build);
```

Create the `getLoadContext` function using `createMetronomeGetLoadContext` with `buildWithMetronome` and the Metronome config file.

```js {% title="server.js" %}
const metronomeGetLoadContext = createMetronomeGetLoadContext(
  buildWithMetronome,
  { config: require("./metronome.config.js") }
);
```

In the `createRequestHandler` function, replace the build prop with `buildWithMetronome` and combine the existing `getLoadContext` with the `metronomeGetLoadContext` by using `combineGetLoadContexts`

```js {% title="server.js" %}
export const handler = createRequestHandler({
  build: buildWithMetronome,
  getLoadContext: combineGetLoadContexts(
    getLoadContext,
    metronomeGetLoadContext
  ),
  mode: process.env.NODE_ENV,
});
```

## Set your API key in your production environment

If you don't have an existing project you can create one [here](/projects/new).

Go to your project in Netlify, and in `Site settings → Build & Deployment → Environment`, set the `METRONOME_API_KEY` environment variable:

{% image src="/images/doc-netlify-envs.png" .w-full .mt-4 .mx-auto .rounded-lg /%}

### Deploy your app

Once you have your `METRONOME_API_KEY` set up in Netlify, deploy your project to production.
