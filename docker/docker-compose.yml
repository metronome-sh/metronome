version: "3"
name: "metronome-test-2"
services:
  web:
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    ports:
      - "${APP_PORT}:${APP_PORT}"
    build:
      context: .
      dockerfile: ./Dockerfile
    # command: pnpm --filter @metronome/db.server migrate:up && pnpm --filter @metronome/web start
    command: /bin/sh -c "pnpm --filter @metronome/db.server migrate:up && pnpm --filter @metronome/web start"
    healthcheck:
      test: "curl --fail http://localhost:${APP_PORT}/healthcheck"
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - metronome-network

  workers:
    depends_on:
      web:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    command: "pnpm --filter @metronome/workers start"
    networks:
      - metronome-network

  cron:
    depends_on:
      web:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    command: "pnpm --filter @metronome/cron start"
    networks:
      - metronome-network

  db:
    restart: always
    platform: linux/amd64
    image: "timescale/timescaledb-ha:pg15.3-ts2.11.1"
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: "${DB_WRITE_USER}"
      POSTGRES_PASSWORD: "${DB_WRITE_PASSWORD}"
      POSTGRES_DB: "${DB_WRITE_DATABASE}"
      TIMESCALEDB_TELEMETRY: "off"

    volumes:
      - "db:/home/postgres/pgdata/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_WRITE_USER} -d ${DB_WRITE_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["-c", "max_connections=9999"]
    networks:
      - metronome-network

  redis:
    restart: always
    image: redis:6.2.6
    command:
      - redis-server
      - --appendonly yes
      - --requirepass
      - "${REDIS_CACHE_PASSWORD}"
    ports:
      - "6379:6379"
    volumes:
      - "redis:/data"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metronome-network

networks:
  metronome-network:

volumes:
  db:
    driver: local
  redis:
    driver: local
